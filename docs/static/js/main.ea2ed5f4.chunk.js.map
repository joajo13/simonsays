{"version":3,"sources":["components/ColorCard.js","utils/util.js","App.js","reportWebVitals.js","index.js"],"names":["ColorCard","color","onClick","flash","className","timeout","ms","Promise","resolve","setTimeout","App","useState","isOn","setIsOn","colorList","initPlay","isDisplay","colors","score","userPlay","userColor","flashColor","setFlashColor","play","setPlay","a","i","length","copyColors","reverse","display","copyUserColors","lastColor","pop","useEffect","newColor","Math","floor","random","push","displayColors","map","v","cardClickHandle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea2ed5f4.chunk.js","sourcesContent":["export default function ColorCard({color, onClick, flash}){\r\n    return (\r\n        <div \r\n            onClick={onClick} \r\n            className={`colorCard ${color} ${flash ?\"flash\" :\"\" }`}>\r\n        </div>\r\n        );\r\n}","export default function timeout(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }","import { useState, useEffect } from 'react';\nimport './App.scss';\nimport ColorCard from './components/ColorCard'\nimport timeout from './utils/util'\n\nfunction App() {\n\n  const [isOn, setIsOn] = useState(false)\n\n  const colorList = [\"green\" , \"red\", \"yellow\", \"blue\"];\n\n  const initPlay = {\n    isDisplay: false,\n    colors: [],\n    score: 0,\n    userPlay: false,\n    userColor: [],\n  };\n\n  const [flashColor, setFlashColor] = useState(\"\")\n\n  const [play, setPlay] = useState(initPlay)\n  \n  function startHandle() {\n    setIsOn(true)\n  }\n\n  useEffect(() => {\n    if(isOn){\n      setPlay({...initPlay, isDisplay: true})\n    }\n    else{\n      setPlay(initPlay)\n    }\n    // eslint-disable-next-line\n  }, [isOn])\n\n\n  useEffect(() => {\n\n    if(isOn && play.isDisplay){\n\n      let newColor = colorList[Math.floor(Math.random()*4)]\n\n      const copyColors = [...play.colors];\n      copyColors.push(newColor)\n      setPlay({...play, colors:copyColors})\n\n    }\n    // eslint-disable-next-line\n  }, [isOn, play.isDisplay])\n\n  useEffect(() => {\n    if(isOn && play.isDisplay && play.colors.length){\n      displayColors()\n    }\n    // eslint-disable-next-line\n  }, [isOn, play.isDisplay, play.colors.length])\n\n  async function displayColors() {\n    await timeout(750);\n    for(let i = 0; i < play.colors.length; i++){\n      setFlashColor(play.colors[i]);\n      await timeout(750);\n      setFlashColor(\"\");\n      await timeout(750);\n\n      if(i === play.colors.length - 1){\n        const copyColors = [...play.colors];\n\n        setPlay({\n          ...play,\n          isDisplay:false,\n          userPlay:true,\n          userColor: copyColors.reverse(),\n        })\n      }\n    }\n  }\n\n  async function cardClickHandle(color){\n    if(!play.display && play.userPlay){\n\n      const copyUserColors = [...play.userColor];\n      const lastColor = copyUserColors.pop();\n      setFlashColor(color);\n\n      if (color === lastColor){\n\n        if(copyUserColors.length){\n          setPlay({...play, userColor:copyUserColors})\n        }else{\n          await timeout(500);\n          setPlay({...play, isDisplay:true, userPlay:false, score:play.colors.length, userColor:[]})\n        }\n        \n      }\n      \n      else {\n        setPlay({...initPlay, score:play.colors.length})\n      }\n\n      await timeout(500)\n      setFlashColor(\"\")\n    }\n  }\n\n  function closeHandle() {\n    setIsOn(false)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"cardWrapper\">\n          {\n            colorList && \n            colorList.map(\n              (v, i) => <ColorCard onClick={()=>{cardClickHandle(v)}} key={v} flash={flashColor === v} color={v}></ColorCard>\n              )\n          }\n        </div>\n\n        {isOn && !play.isDisplay && !play.userPlay && play.score &&(\n          <div className=\"lost\">\n            <div>FinalScore: {play.score} </div>\n            <button onClick={closeHandle}> Close </button>\n          </div>\n        ) }\n        {!isOn && !play.score && (\n        <button onClick={startHandle} className=\"startButton\"> Start </button>\n        )}\n        {isOn && (play.isDisplay || play.userPlay)  && (\n        <div className=\"score\"> {play.score} </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}